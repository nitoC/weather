{"version":3,"sources":["weatherApp/geoWeatherapp.jsx","weatherApp/weatherapp.jsx","App.js","serviceWorker.js","index.js"],"names":["apiUrl","lon","lat","apiUrlCC","sc","transform","top","left","sc1","pos1","position","bottom","right","pos2","pos3","pointerEvent","pos4","width","height","zIndex","descicons","icon","icv","DisplayGeo","props","id","style","weather","scale","float","fontWeight","padding","cursor","fontSize","onClick","togX","dispInput","className","temperature","wind","outlook","humidity","Geoweather","state","blur","toggle","country","handlegeoClick","bind","handlevalues","slide","handleX","this","setState","temp","Math","round","navigator","geolocation","getCurrentPosition","coords","longitude","latitude","fetch","then","response","json","data","console","log","current","description","forEach","a","b","wind_speed","timezone","visibility","catch","err","type","React","Component","Display","backgroundColor","color","textAlign","Weather","cityInp","handleclick","changeCity","city","event","target","value","main","speed","sys","name","for","onChange","aria-describedby","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.914a3863.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nvar sc = {\r\n  transform: 'scale(0)',\r\n  top: '10%',\r\n  left: '-500px',\r\n  transform: 'translateX(-50%)',\r\n  visibility: 'hiddden',\r\n  width: 0,\r\n};\r\nvar sc1 = {\r\n  transform: 'scale(1)',\r\n  top: '10%',\r\n  left: '50%',\r\n  transform: 'translateX(-50%)',\r\n  visibility: 'visible',\r\n  maxWidth:'50%'\r\n};\r\nvar track = false;\r\nvar pos1 = {\r\n  position: 'fixed',\r\n  bottom: '2px',\r\n  right: '2px',\r\n};\r\nvar pos2 = {\r\n  position: 'fixed',\r\n  bottom: '-158px',\r\n  right: '2px',\r\n};\r\nvar pos3 = {\r\n  transform: 'scale(0)',\r\n  position: 'fixed',\r\n  bottom: 0,\r\n  right: 0,\r\n  left: 0,\r\n  top: 0,\r\n  pointerEvent: 'all',\r\n};\r\nvar pos4 = {\r\n  transform: 'scale(1)',\r\n  pointerEvent: 'none',\r\n  position: 'fixed',\r\n  bottom: 0,\r\n  right: 0,\r\n  left: 0,\r\n  top: 0,\r\n  width: '100vw',\r\n  height: '100vh',\r\n  zIndex: '1',\r\n};\r\nvar descicons = [\r\n  'clear sky',\r\n  'few clouds',\r\n  'scattered clouds',\r\n  'broken clouds',\r\n  'shower rain',\r\n  'rain',\r\n  'thunder storm',\r\n  'snow',\r\n  'mist',\r\n  'overcast clouds',\r\n  'light rain',\r\n];\r\nvar icon = [\r\n  'fas fa-sun',\r\n  'fas fa-cloud',\r\n  'fas fa-cloud-sun',\r\n  'fas fa-cloud-meatball',\r\n  'fas fa-cloud-sun-rain',\r\n  'fas fa-cloud-showers-heavy',\r\n  'fas fa-poo-storm',\r\n  'fas fa-snowflake',\r\n  'fas fa-smog',\r\n  'fas fa-water',\r\n  'fas fa-cloud-rain',\r\n];\r\nvar aID = '709d60e1060c35dcb2d9bc6b3ab181f6';\r\nvar icv = '';\r\n\r\nvar apiUrl;\r\nvar apId = '70fb616a3dbc2ad6a503a1289bf25249';\r\nvar lon;\r\nvar lat;\r\n\r\nconst DisplayGeo = (props) => {\r\n  return (\r\n    <div id=\"modal\" style={props.weather.scale}>\r\n      <span\r\n        style={{\r\n          float: 'right',\r\n          fontWeight: 'bold',\r\n          padding: '1.25em',\r\n          cursor: 'pointer',\r\n          fontSize: '1.2em',\r\n        }}\r\n        onClick={props.togX}\r\n      >\r\n        &times;\r\n      </span>\r\n      <h2 style={{padding: '1.1em'}}>{props.weather.dispInput}</h2>\r\n\r\n      <i className={props.weather.icon} />\r\n      <h5>{props.weather.weather}</h5>\r\n\r\n      <h5>\r\n        <span>\r\n          {props.weather.temperature} {props.weather.wind}\r\n          {props.weather.outlook} {props.weather.humidity}\r\n        </span>\r\n      </h5>\r\n    </div>\r\n  );\r\n};\r\nclass Geoweather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      scale: sc,\r\n      blur: pos3,\r\n      toggle: '^',\r\n      position: pos2,\r\n      icon: icv,\r\n      country: '',\r\n      dispInput: '',\r\n      temperature: '',\r\n      outlook: '',\r\n      humidity: '',\r\n      weather: '',\r\n      wind: '',\r\n    };\r\n    this.handlegeoClick = this.handlegeoClick.bind(this);\r\n    this.handlevalues = this.handlevalues.bind(this);\r\n    this.slide = this.slide.bind(this);\r\n    this.handleX = this.handleX.bind(this);\r\n  }\r\n  slide() {\r\n    if (this.state.toggle === '^') {\r\n      this.setState({\r\n        toggle: 'x',\r\n        position: pos1,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        toggle: '^',\r\n        position: pos2,\r\n      });\r\n    }\r\n  }\r\n  handlevalues(weather, humidity, temp, wind, country, outlook) {\r\n    this.setState({\r\n      scale: sc1,\r\n      blur: pos4,\r\n      temperature: Math.round(temp - 273.15) + ' deg celsius',\r\n      dispInput: country,\r\n      outlook: outlook + ' visibility',\r\n      humidity: ',relative humidity of ' + humidity,\r\n      weather: weather,\r\n      wind: ',' + wind + ' wind speed, ',\r\n      icon: icv,\r\n    });\r\n  }\r\n  handlegeoClick() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        lon = position.coords.longitude;\r\n        lat = position.coords.latitude;\r\n        apiUrl = `http://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&\r\n        exclude=hourly,daily&appid=${apId}`;\r\n        fetch(apiUrl)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            console.log(data.current.weather[0].description);\r\n            descicons.forEach((a, b) => {\r\n              if (a === data.current.weather[0].description) {\r\n                console.log(icv);\r\n                icv = icon[b];\r\n                console.log(icon[b]);\r\n              }\r\n            });\r\n            this.handlevalues(\r\n              data.current.weather[0].description,\r\n              data.current.humidity,\r\n              data.current.temp,\r\n              data.current.wind_speed,\r\n              data.timezone,\r\n              data.current.visibility\r\n            );\r\n          })\r\n          .catch((err) => console.log(err));\r\n      });\r\n    }\r\n  }\r\n  handleX() {\r\n    this.setState({\r\n      scale: sc,\r\n      blur: pos3,\r\n      position: pos2,\r\n      toggle: '^',\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section id=\"fixed\" style={this.state.position}>\r\n        <span\r\n          style={{\r\n            fontSize: '1.5em',\r\n            cursor: 'pointer',\r\n            padding: '0.5em',\r\n            fontWeight: 'bold',\r\n          }}\r\n          onClick={this.slide}\r\n        >\r\n          {this.state.toggle}\r\n        </span>\r\n        <DisplayGeo weather={this.state} togX={this.handleX} />\r\n        <div>\r\n          <h6 id=\"headertext\">\r\n            You dont know your location?then click here to get weather{' '}\r\n          </h6>\r\n          <button\r\n            id=\"b\"\r\n            className=\"btn btn-info\"\r\n            type=\"submit\"\r\n            onClick={this.handlegeoClick}\r\n          >\r\n            weather\r\n          </button>\r\n        </div>\r\n        <div id=\"blur\" style={this.state.blur}></div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Geoweather;\r\n","import React, {Component} from 'react';\r\nimport './cssFiles/weather.css';\r\nimport Geoweather from './geoWeatherapp.jsx';\r\nvar descicons = [\r\n  'clear sky',\r\n  'few clouds',\r\n  'scattered clouds',\r\n  'broken clouds',\r\n  'shower rain',\r\n  'rain',\r\n  'thunder storm',\r\n  'snow',\r\n  'mist',\r\n  'overcast clouds',\r\n  'light rain',\r\n  'very heavy rain'\r\n];\r\nvar icon = [\r\n  'fas fa-sun',\r\n  'fas fa-cloud',\r\n  'fas fa-cloud-sun',\r\n  'fas fa-cloud-meatball',\r\n  'fas fa-cloud-sun-rain',\r\n  'fas fa-cloud-showers-heavy',\r\n  'fas fa-poo-storm',\r\n  'fas fa-snowflake',\r\n  'fas fa-smog',\r\n  'fas fa-water',\r\n  'fas fa-cloud-rain',\r\n  'fas fa-cloud-rain'\r\n];\r\nvar aID = '709d60e1060c35dcb2d9bc6b3ab181f6';\r\nvar apiUrlCC;\r\nvar icv = '';\r\nconst Display = (props) => {\r\n  return (\r\n    <div id=\"displayC\">\r\n      <h2>{props.weather.dispInput}</h2>\r\n      <h1 className=\"display-1 text-center\" style={{backgroundColor: 'white'}}>\r\n        <i\r\n          id=\"h1\"\r\n          className={'text-dark ' + props.weather.icon}\r\n          style={{color: 'black'}}\r\n        />\r\n      </h1>\r\n      <div id=\"weather\">\r\n        <h5>{props.weather.weather}</h5>\r\n        <div id=\"xtra-info\" style={{textAlign: 'center'}}>\r\n          <span className=\"text-center\">\r\n            {props.weather.temperature} {props.weather.humidity}{' '}\r\n            {props.weather.wind}{' '}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      icon: icv,\r\n      cityInp: '',\r\n      country: '',\r\n      dispInput: 'WC current weather forcast',\r\n      temperature: `   Type in your city and country code to view your\r\n      current weather forcast if you dont know your country code leave blank`,\r\n      outlook: '',\r\n      humidity: '',\r\n      weather: '',\r\n      wind: '',\r\n    };\r\n    this.handleclick = this.handleclick.bind(this);\r\n    this.changeCity = this.changeCity.bind(this);\r\n    this.handlevalues = this.handlevalues.bind(this);\r\n  }\r\n  handlevalues(weather, humidity, temp, wind, country, city, outlook) {\r\n    this.setState({\r\n      temperature: Math.round(temp - 273.15) + 'deg celsius',\r\n      dispInput: city + ', ' + country,\r\n      outlook,\r\n      humidity: ',relative humidity of ' + humidity,\r\n      weather,\r\n      wind: ',' + wind + ' wind speed',\r\n      icon: icv,\r\n    });\r\n  }\r\n  changeCity(event) {\r\n    if (event.target.id == 'cc') {\r\n      console.log('hey');\r\n      return this.setState({\r\n        country: event.target.value,\r\n      });\r\n    }\r\n    console.log('ho');\r\n    return this.setState({\r\n      cityInp: event.target.value,\r\n    });\r\n  }\r\n  handleclick() {\r\n    if(this.state.city!==''){\r\n    var XML = fetch(apiUrlCC);\r\n    XML.then((response) => response.json()).then((data) => {\r\n      console.log(data);\r\n      descicons.forEach((a, b) => {\r\n        if (data.weather[0].description === a) {\r\n          console.log(a);\r\n          console.log(icon[b]);\r\n          icv = icon[b];\r\n        }\r\n       \r\n      });\r\n      this.handlevalues(\r\n        data.weather[0].description,\r\n        data.main.humidity,\r\n        data.main.temp,\r\n        data.wind.speed,\r\n        data.sys.country,\r\n        data.name\r\n      );\r\n    });\r\n   }\r\n   return;\r\n  }\r\n  render() {\r\n    apiUrlCC = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.cityInp},${this.state.country}&APPID=${aID}`;\r\n    return (\r\n      <main>\r\n        <div id=\"div\" className=\"form-group\">\r\n          <header>\r\n            <h1 className=\"h1 text-center\">\r\n              <span>WC</span> weather\r\n            </h1>\r\n          </header>\r\n          <div id=\"upper\">\r\n            <label for=\"city\">city</label>\r\n            <input\r\n              onChange={this.changeCity}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              id=\"city\"\r\n              aria-describedby=\"helpId\"\r\n              placeholder=\"London\"\r\n              required\r\n            />\r\n            <small id=\"helpId\" className=\"form-text text-muted\">\r\n              <a id=\"city\" className=\"btn btn-link btn text-dark\">\r\n                more info?\r\n              </a>\r\n            </small>\r\n            <label for=\"cc\">Country Code</label>\r\n            <input\r\n              onChange={this.changeCity}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"cc\"\r\n              id=\"cc\"\r\n              aria-describedby=\"helpId\"\r\n              placeholder=\"Uk\"\r\n              required\r\n            />\r\n            <small id=\"helpId\" className=\"form-text text-muted\">\r\n              <a id=\"country\" className=\"btn btn-link text-dark\">\r\n                more info country code?\r\n              </a>\r\n            </small>\r\n            <button\r\n              type=\"submit\"\r\n              onClick={this.handleclick}\r\n              className=\"btn btn-danger btn-block\"\r\n            >\r\n              weather\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <section>\r\n          <Display weather={this.state} />\r\n        </section>\r\n\r\n        <Geoweather />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\nimport './App.css';\n//import Car from './fComponent';\nimport Weather from './weatherApp/weatherapp.jsx';\n\nfunction App() {\n  return (\n    <div>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}